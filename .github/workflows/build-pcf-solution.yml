name: Build PCF Solution

on:
  workflow_dispatch:
  push:
    paths:
      - 'CommentsControl/**'
      - '.github/workflows/build-pcf-solution.yml'

jobs:
  build-solution:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install Power Platform CLI (pac)
        run: |
          $ErrorActionPreference = 'Stop'
          $candidates = @('1.48.2','1.47.6','1.46.6') # try these; fall back to latest
          $ok = $false
          foreach ($v in $candidates) {
            try {
              dotnet tool install -g Microsoft.PowerApps.CLI.Tool --version $v
              Write-Host "Installed PAC $v"
              $ok = $true; break
            } catch {
              Write-Host "PAC $v not available, trying next…"
            }
          }
          if (-not $ok) {
            try {
              dotnet tool install -g Microsoft.PowerApps.CLI.Tool
              Write-Host "Installed latest PAC"
              $ok = $true
            } catch {
              dotnet tool update -g Microsoft.PowerApps.CLI.Tool
              Write-Host "Updated PAC to latest"
              $ok = $true
            }
          }
      
          # Put the user tools folder on PATH for subsequent steps
          echo "$env:USERPROFILE\.dotnet\tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          & "$env:USERPROFILE\.dotnet\tools\pac.exe" help | Out-Host


      - name: Scaffold clean PCF project in CI (dataset)
        run: |
          mkdir ci_pcf
          cd ci_pcf
          pac pcf init --namespace Comments --name CommentsControl --template dataset --framework none
          Get-ChildItem -Recurse -File | Select-Object FullName | Out-Host

      - name: Copy your code/manifest/resources into the scaffold
        run: |
          Copy-Item -Force "CommentsControl\index.ts" "ci_pcf\CommentsControl\index.ts"
          Copy-Item -Force "CommentsControl\ControlManifest.Input.xml" "ci_pcf\CommentsControl\ControlManifest.Input.xml"
          if (Test-Path "CommentsControl\strings\strings.resx") {
            New-Item -ItemType Directory -Force "ci_pcf\CommentsControl\strings" | Out-Null
            Copy-Item -Force "CommentsControl\strings\strings.resx" "ci_pcf\CommentsControl\strings\strings.resx"
          }
          if (Test-Path "CommentsControl\types") {
            Copy-Item -Recurse -Force "CommentsControl\types" "ci_pcf\CommentsControl\types"
          }
          $pcfconfig = "ci_pcf\CommentsControl\pcfconfig.json"
          if (!(Test-Path $pcfconfig)) {
            $pcfconfigContent = '{ "outDir": "./out/controls" }'
            Set-Content -Path $pcfconfig -Value $pcfconfigContent -Encoding UTF8
          }
          Write-Host "=== Manifest head ==="
          Get-Content "ci_pcf\CommentsControl\ControlManifest.Input.xml" -TotalCount 25 | Write-Host

      - name: Build the PCF control
        working-directory: ./ci_pcf/CommentsControl
        run: |
          if (Test-Path package-lock.json) {
            npm ci --no-audit --no-fund
          } else {
            npm install --no-audit --no-fund
          }
          npx pcf-scripts build

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Create solution skeleton
        run: |
          mkdir solution
          cd solution
          pac solution init --publisher-name TheAlliance --publisher-prefix ta

      - name: Set solution identity (name, display name, version)
        run: |
          $solPath = Resolve-Path ./solution/src/Other/Solution.xml
          [xml]$sol = Get-Content $solPath
          # Unique name must not clash with anything in your env
          $sol.ImportExportXml.SolutionManifest.UniqueName = 'ta_comments_control_redux'
          # Display name (1033 = en-US)
          $ln = $sol.SelectSingleNode('//LocalizedName[@languagecode="1033"]')
          if (-not $ln) {
            $lns = $sol.SelectSingleNode('//LocalizedNames')
            if (-not $lns) {
              $lns = $sol.CreateElement('LocalizedNames')
              $sol.ImportExportXml.SolutionManifest.AppendChild($lns) | Out-Null
            }
            $ln = $sol.CreateElement('LocalizedName')
            $ln.SetAttribute('languagecode','1033')
            $lns.AppendChild($ln) | Out-Null
          }
          $ln.SetAttribute('description','Comments Control Redux')
          # Optional: set/bump version
          $sol.ImportExportXml.SolutionManifest.Version = '1.0.0.0'
          $sol.Save($solPath)
          Write-Host "Updated Solution.xml -> UniqueName=ta_comments_control_redux, Display='Comments Control Redux'"

      - name: Add PCF control to solution (PAC add-reference)
        run: |
          cd solution
          $pac = "$env:USERPROFILE\.dotnet\tools\pac.exe"
          # Path MUST be the folder that contains ControlManifest.Input.xml
          & $pac solution add-reference --path ../ci_pcf/CommentsControl
          if ($LASTEXITCODE -ne 0 -and (Test-Path ../Comments.pcfproj)) {
            Write-Warning "Folder add-reference failed; trying .pcfproj…"
            & $pac solution add-reference --path ../Comments.pcfproj
          }
      


      - name: Build solution (Unmanaged + Managed)
        run: |
          cd solution
          msbuild /t:build /restore /p:Configuration=Debug
          msbuild /t:build /restore /p:Configuration=Release /p:PackageType=Managed

      - name: Rename zips to friendly names
        run: |
          $un = Get-ChildItem "solution\bin\Debug\*.zip"   | Select-Object -First 1
          $mn = Get-ChildItem "solution\bin\Release\*.zip" | Select-Object -First 1
          if ($un) { Copy-Item $un.FullName "solution\bin\Comments_Control_Redux_Unmanaged.zip" -Force }
          if ($mn) { Copy-Item $mn.FullName "solution\bin\Comments_Control_Redux_Managed.zip"   -Force }

      - name: Upload solution zips
        uses: actions/upload-artifact@v4
        with:
          name: pcf-solution-zips
          path: |
            solution\bin\Comments_Control_Redux_Unmanaged.zip
            solution\bin\Comments_Control_Redux_Managed.zip

      - name: Dump PAC logs on failure
        if: failure()
        run: |
          $logs = Get-ChildItem "$env:USERPROFILE\.dotnet\tools" -Filter pac-log.txt -Recurse -ErrorAction SilentlyContinue
          if ($logs) { foreach ($l in $logs) { Write-Host "=== PAC LOG: $($l.FullName) ==="; Get-Content $l.FullName -Raw | Write-Host } }
          else { Write-Host "No pac-log.txt found." }
